// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MvcMovie.Data;

#nullable disable

namespace calcalc.Migrations
{
    [DbContext(typeof(CalCalcContext))]
    partial class CalCalcContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Calories")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("UserAdded")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FoodItem");
                });

            modelBuilder.Entity("calcalc.Models.FoodHasUnit", b =>
                {
                    b.Property<int>("FoodItemId")
                        .HasColumnType("int");

                    b.Property<int>("FoodUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("GramsPerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FoodItemId", "FoodUnitId");

                    b.HasIndex("FoodUnitId");

                    b.ToTable("FoodHasUnit");
                });

            modelBuilder.Entity("calcalc.Models.FoodSynonym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FoodItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodItemId");

                    b.ToTable("FoodSynonym");
                });

            modelBuilder.Entity("calcalc.Models.FoodUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AmountDeciliters")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FoodUnit");
                });

            modelBuilder.Entity("calcalc.Models.FoodUnitSynonym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FoodUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodUnitId");

                    b.ToTable("FoodUnitSynonyms");
                });

            modelBuilder.Entity("calcalc.Models.FoodHasUnit", b =>
                {
                    b.HasOne("FoodItem", null)
                        .WithMany("Units")
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("calcalc.Models.FoodUnit", "FoodUnit")
                        .WithMany()
                        .HasForeignKey("FoodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodUnit");
                });

            modelBuilder.Entity("calcalc.Models.FoodSynonym", b =>
                {
                    b.HasOne("FoodItem", null)
                        .WithMany("Synonyms")
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("calcalc.Models.FoodUnitSynonym", b =>
                {
                    b.HasOne("calcalc.Models.FoodUnit", null)
                        .WithMany("Synonyms")
                        .HasForeignKey("FoodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodItem", b =>
                {
                    b.Navigation("Synonyms");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("calcalc.Models.FoodUnit", b =>
                {
                    b.Navigation("Synonyms");
                });
#pragma warning restore 612, 618
        }
    }
}
